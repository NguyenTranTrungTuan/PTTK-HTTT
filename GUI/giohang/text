package GUI.giohang;
import DTO.KhachHang_DTO;
import GUI.user.Model_ProductItem;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class GioHangGUI extends JPanel implements ActionListener {
    private JLabel lbTongTienValue;
    private JPanel itemPanel;
    private List<Model_ProductItem> products;
    private JButton btnDatHang;
    private ThongTinDatHang thongTinNhanHang;
    private JPanel contentPanel;
    private ThanhToanUIDesigner thanhtoan;
    private CardLayout cardLayout;
    

    public GioHangGUI() {
        products = new ArrayList<>();
        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);
        this.setLayout(new BorderLayout());
        this.add(contentPanel, BorderLayout.CENTER);

        JPanel gioHangPanel = initGioHangPanel();
        contentPanel.add(gioHangPanel, "GioHang");

        thongTinNhanHang = new ThongTinDatHang(cardLayout, contentPanel);
        contentPanel.add(thongTinNhanHang, "ThongTinNhanHang");

        thanhtoan = new ThanhToanUIDesigner(cardLayout, contentPanel);
        contentPanel.add(thanhtoan, "ThanhToan");
        //hoaDonPanel = new HoaDonPanel(cardLayout, contentPanel);
       
        //contentPanel.add(hoaDonPanel, "HoaDon");

    }

    private JPanel initGioHangPanel() {
        JPanel gioHangPanel = new JPanel(new BorderLayout(0,0));
        gioHangPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Điều hướng trên cùng
        gioHangPanel.add(createNavPanel(), BorderLayout.NORTH);

        itemPanel = new JPanel();
        itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.Y_AXIS));
        
        gioHangPanel.add(new JScrollPane(itemPanel), BorderLayout.CENTER);



        // Panel tổng tiền + nút
        JPanel bottomPanel = new JPanel(new BorderLayout(10, 10));
        JPanel totalPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JLabel lbTongTienLabel = new JLabel("Tổng tiền:");
        lbTongTienLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        totalPanel.add(lbTongTienLabel);

        lbTongTienValue = new JLabel("0₫");
        lbTongTienValue.setFont(new Font("Segoe UI", Font.BOLD, 18));
        lbTongTienValue.setForeground(Color.RED);
        totalPanel.add(lbTongTienValue);

        bottomPanel.add(totalPanel, BorderLayout.WEST);

        // Xóa tất cả
        JButton btnXoaTatCa = new JButton("Xóa tất cả");
        btnXoaTatCa.setBackground(Color.RED);
        btnXoaTatCa.setForeground(Color.WHITE);
        btnXoaTatCa.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnXoaTatCa.addActionListener(e -> {
            products.clear();
            itemPanel.removeAll();
            updateTongTien();
            itemPanel.revalidate();
            itemPanel.repaint();
        });
        bottomPanel.add(btnXoaTatCa, BorderLayout.CENTER);

        // Đặt hàng
        btnDatHang = new JButton("ĐẶT HÀNG");
        btnDatHang.setBackground(new Color(215, 0, 24));
        btnDatHang.setForeground(Color.WHITE);
        btnDatHang.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnDatHang.setPreferredSize(new Dimension(250, 45));
        btnDatHang.setFocusPainted(false);
        btnDatHang.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDatHang.addActionListener(this);
        bottomPanel.add(btnDatHang, BorderLayout.EAST);

        gioHangPanel.add(bottomPanel, BorderLayout.SOUTH);
        return gioHangPanel;
    }

    private JPanel createNavPanel() {
        JPanel navPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));
        navPanel.add(createNavLabel("Giỏ hàng", true));
        navPanel.add(createNavLabel("Thông tin đặt hàng", false));
        navPanel.add(createNavLabel("Thanh toán", false));
        navPanel.add(createNavLabel("Hoàn tất", false));
        return navPanel;
    }

    private JLabel createNavLabel(String text, boolean isActive) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Segoe UI", Font.BOLD, 14));
        label.setForeground(isActive ? new Color(230, 0, 0) : Color.GRAY);
        label.setBorder(new EmptyBorder(0, 10, 0, 10));
        return label;
    }

    public void themSanPhamVaoGio(Model_ProductItem data) {
        boolean daTonTai = false;
        for (Model_ProductItem p : products) {
            if (p.getTitle().equals(data.getTitle())) {
                p.setAmount(p.getAmount() + data.getAmount());
                daTonTai = true;
                break;
            }
        }
        if (!daTonTai) products.add(data);

        refreshProductList();
        updateTongTien();
    }

    private void refreshProductList() {
        itemPanel.removeAll();
        for (Model_ProductItem item : products) {
            itemPanel.add(createProductPanel(item));
        }
        itemPanel.revalidate();
        itemPanel.repaint();
    }

    private JPanel createProductPanel(Model_ProductItem data) {
     
        JPanel productPanel = new JPanel(new BorderLayout(10, 10));
        productPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        productPanel.setBackground(Color.WHITE);
        
        // Hình ảnh
        JLabel lbhinhanh = new JLabel();
        lbhinhanh.setIcon(new ImageIcon("GUI/user/ProductImage/" + data.getImageicon() + ".png"));
        lbhinhanh.setHorizontalAlignment(SwingConstants.CENTER);
        lbhinhanh.setPreferredSize(new Dimension(140, 80));
        productPanel.add(lbhinhanh, BorderLayout.WEST);

        // Chi tiết sản phẩm
        JPanel detailsPanel = new JPanel(new BorderLayout());
        detailsPanel.setBackground(Color.WHITE);

        JLabel lbTenSanPham = new JLabel(data.getTitle());
        lbTenSanPham.setFont(new Font("Segoe UI", Font.BOLD, 14));
        detailsPanel.add(lbTenSanPham, BorderLayout.NORTH);

        JLabel lbGiaMoi = new JLabel(String.format("%,.0f₫", data.getPrice()));
        lbGiaMoi.setFont(new Font("Segoe UI", Font.BOLD, 16));
        lbGiaMoi.setForeground(Color.RED);
        detailsPanel.add(lbGiaMoi, BorderLayout.CENTER);

        productPanel.add(detailsPanel, BorderLayout.CENTER);

        // Số lượng và nút
        JPanel quantityPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));
        quantityPanel.setPreferredSize(new Dimension(200,80));
        JLabel lbSoLuong = new JLabel(String.valueOf(data.getAmount()));
        JButton btnGiam = new JButton("-");
        JButton btnThem = new JButton("+");
        JButton btnXoa = new JButton("Xóa");
        lbSoLuong.setPreferredSize(new Dimension(20, 30));
        btnGiam.setPreferredSize(new Dimension(50, 30));
        btnThem.setPreferredSize(new Dimension(50, 30));
        btnXoa.setPreferredSize(new Dimension(70, 30));
        btnGiam.setBackground(Color.GRAY);
        btnThem.setBackground(Color.GRAY);
        btnXoa.setBackground(Color.RED);
        btnGiam.setForeground(Color.WHITE);
        btnThem.setForeground(Color.WHITE);
        btnXoa.setForeground(Color.WHITE);
        btnGiam.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnThem.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnXoa.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnGiam.addActionListener(e -> {
            int current = data.getAmount();
            if (current > 1) {
                data.setAmount(current - 1);
            } else {
                products.remove(data);
            }
            refreshProductList();
            updateTongTien();
        });

        btnThem.addActionListener(e -> {
            data.setAmount(data.getAmount() + 1);
            refreshProductList();
            updateTongTien();
        });

        btnXoa.addActionListener(e -> {
            products.remove(data);
            refreshProductList();
            updateTongTien();
        });

        quantityPanel.add(btnGiam);
        quantityPanel.add(lbSoLuong);
        quantityPanel.add(btnThem);
        quantityPanel.add(btnXoa);
 
        productPanel.add(quantityPanel, BorderLayout.EAST);
       
        return productPanel;
    }

    private void updateTongTien() {
        double tongTien = 0;
        for (Model_ProductItem product : products) {
            tongTien += product.getPrice() * product.getAmount();
        }
        lbTongTienValue.setText(String.format("%,.0f₫", tongTien));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnDatHang) {
            if (products.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Giỏ hàng trống! Vui lòng thêm sản phẩm trước khi đặt hàng.",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thongTinNhanHang.updateItems(products);
            cardLayout.show(contentPanel, "ThongTinNhanHang");
        }
    }
}
